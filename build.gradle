buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
        maven { url = "https://plugins.gradle.org/m2/" }
        maven { url = "https://repo.spongepowered.org/maven/" }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}

plugins {
    id "com.wynprice.cursemaven" version "2.1.1"
    id "maven-publish"
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'

apply plugin: 'org.spongepowered.mixin'

version = '1.1'
group = 'com.ridanisaurus.emendatusenigmatica' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'emendatusenigmatica'

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

minecraft {
    // The mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   Snapshot are built nightly.
    // stable_#            Stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: 'snapshot', version: mcp_version
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

    // accessTransformer = file('src/main/resources/META-INF/at.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')
            arg '-mixin.config=emendatusenigmatica.mixins.json'

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'info'
            properties 'mixin.env.disableRefMap': 'true'
            source sourceSets.main
        }

        server {
            workingDirectory project.file('run')
            arg '-mixin.config=emendatusenigmatica.mixins.json'

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'info'
            properties 'mixin.env.disableRefMap': 'true'
            source sourceSets.main
        }

        data {
            workingDirectory project.file('run')
            arg '-mixin.config=emendatusenigmatica.mixins.json'

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'info'
            properties 'mixin.env.disableRefMap': 'true'

            args '--mod', 'emendatusenigmatica', '--all', '--output', '"' + rootProject.file('src/generated/resources/') + '"', '--existing', '"' + sourceSets.main.resources.srcDirs[0] + '"'
            source sourceSets.main
        }
    }
}

sourceSets.main.resources {
    srcDir 'src/generated/resources'
}

repositories {
    // JEI
    maven { name = "Progwml6 maven"; url = "https://dvs1.progwml6.com/files/maven/" }
    maven { url 'https://modmaven.dev/' }
    // IE
//    maven {	name = "BlameJared"; url = "https://maven.blamejared.com/" }
//    maven {
//        // location of a maven mirror for JEI files, as a fallback
//        name = "ModMaven"
//        url = "https://modmaven.k-4u.nl"
//    }
}

dependencies {
    // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"

    implementation 'org.spongepowered:mixin:0.8-SNAPSHOT'

    // You may put jars on which you depend on in ./libs or you may define them like so..
    // compile "some.group:artifact:version:classifier"
    // compile "some.group:artifact:version"

    // Real examples
    // compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'  // adds buildcraft to the dev env
    // compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env

    // The 'provided' configuration is for optional dependencies that exist at compile-time but might not at runtime.
    // provided 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // These dependencies get remapped to your current MCP mappings
    // deobf 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // For more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html

    //if (findProject(':workspace') == null) {
    compileOnly fg.deobf("mezz.jei:jei-${jei_version}:api")
    // at runtime, use the full JEI jar
    runtimeOnly fg.deobf("mezz.jei:jei-${jei_version}")
    //}

    // compileOnly "mekanism:Mekanism:${mekanism_version}:api"
    // runtimeOnly fg.deobf("mekanism:Mekanism:${mekanism_version}")// core

    //runtimeOnly fg.deobf("curse.maven:worldstripper-250603:3054192")
    //runtimeOnly fg.deobf("curse.maven:immersive-engineering-231951:3189063")
    //runtimeOnly fg.deobf("curse.maven:oh-the-biomes-youll-go-247560:3197729")
    //runtimeOnly fg.deobf("curse.maven:betterend-forge-port-428877:3185939")
    //runtimeOnly fg.deobf("curse.maven:apotheosis-313970:3095843")
    //runtimeOnly fg.deobf("curse.maven:placebo-283644:3172794")
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
                "MixinConfigs"            : "emendatusenigmatica.mixins.json",
                "Specification-Title"     : "emendatusenigmatica",
                "Specification-Vendor"    : "Ridanisaurus",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : "${version}",
                "Implementation-Vendor"   : "Ridanisaurus",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}

mixin {
    add sourceSets.main, "emendatusenigmatica.refmap.json"
}
